micronaut.server.host-resolution.protocol-header=x-forwarded-proto
micronaut.server.host-resolution.host-header=host
datasources.default.dialect=POSTGRES
micronaut.application.name=starter-analytics
datasources.default.driver-class-name=org.postgresql.Driver
# Cloud SQL Config
cloud.sql.connection.ip-types[0]=PUBLIC
cloud.sql.connection.ip-types[1]=PRIVATE
# Hikari Config
# https://github.com/GoogleCloudPlatform/java-docs-samples/blob/780bb0e6f01c30f0ad1a49bfadb6d0f45615e3c2/cloud-sql/mysql/servlet/src/main/java/com/example/cloudsql/ConnectionPoolFactory.java
#  maximumPoolSize limits the total number of concurrent connections this pool will keep. Ideal
# values for this setting are highly variable on app design, infrastructure, and database.
datasources.default.maximum-pool-size=5
# minimumIdle is the minimum number of idle connections Hikari maintains in the pool.
# Additional connections will be established to meet this value unless the pool is full.
datasources.default..minimum-idle=5
# setConnectionTimeout is the maximum number of milliseconds to wait for a connection checkout.
# Any attempt to retrieve a connection from this pool that exceeds the set limit will throw an
# SQLException.
# 10 seconds
datasources.default.connection-timeout=10000
# idleTimeout is the maximum amount of time a connection can sit in the pool. Connections that
# sit idle for this many milliseconds are retried if minimumIdle is exceeded.
# 10 minutes
datasources.default.idle-timeout=600000
# Hikari automatically delays between failed connection attempts, eventually reaching a
# maximum delay of `connectionTimeout / 2` between attempts.

# maxLifetime is the maximum possible lifetime of a connection in the pool. Connections that
# live longer than this many milliseconds will be closed and reestablished between uses. This
# value should be several minutes shorter than the database's timeout value to avoid unexpected
# terminations.
# 30 minutes
datasources.default.max-lifetime=1800000
